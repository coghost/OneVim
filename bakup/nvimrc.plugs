" ============================================================================
" Plugin configuration
" ============================================================================

if has_key(g:plugs, 'todoist.nvim')
    let todoist = {
                \ 'icons': {
                \   'unchecked': '  ',
                \   'checked':   '  ',
                \   'loading':   '  ',
                \   'error':     '  ',
                \ },
                \}
endif

" --------------------------------------------------
" startify
" --------------------------------------------------
if has_key(g:plugs, 'vim-startify')
    let g:startify_session_dir = '~/.config/nvim/session'
    let g:startify_session_autoload = 1
    let g:startify_session_persistence = 1
    let g:startify_session_delete_buffers = 1
    let g:startify_change_to_vcs_root = 1
    let g:startify_fortune_use_unicode = 1
    let g:startify_session_persistence = 1
    let g:startify_enable_special = 0

    " returns all modified files of the current git repo
    " `2>/dev/null` makes the command fail quietly, so that when we are not
    " in a git repo, the list will be empty
    function! s:gitModified()
        let files = systemlist('git ls-files -m 2>/dev/null')
        return map(files, "{'line': v:val, 'path': v:val}")
    endfunction

    " same as above, but show untracked files, honouring .gitignore
    function! s:gitUntracked()
        let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
        return map(files, "{'line': v:val, 'path': v:val}")
    endfunction

    let g:startify_lists = [
                \ { 'type': 'sessions',  'header': ['   Sessions']       },
                \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
                \ { 'type': 'files',     'header': ['   MRU']            },
                \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
                \ { 'type': function('s:gitModified'),  'header': ['   git modified']},
                \ { 'type': function('s:gitUntracked'), 'header': ['   git untracked']},
                \ { 'type': 'commands',  'header': ['   Commands']       },
                \ ]
    let g:startify_bookmarks = [
                \ { 'd': '~/Documents/dicts/common1.txt' },
                \ ]
endif


" --------------------------------------------------
" vim-sneak
" --------------------------------------------------
if has_key(g:plugs, 'vim-sneak')
    " let g:sneak#label = 1
    nmap + <Plug>Sneak_;
    omap + <Plug>Sneak_;
    xmap + <Plug>Sneak_;
    nmap _ <Plug>Sneak_,
    omap _ <Plug>Sneak_,
    xmap _ <Plug>Sneak_,
endif


" --------------------------------------------------
" material.vim
" --------------------------------------------------
if has_key(g:plugs, 'material.vim')
    " For Neovim 0.1.3 and 0.1.4 - https://github.com/neovim/neovim/pull/2198
    if (has('nvim'))
        let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
    endif

    " For Neovim > 0.1.5 and Vim > patch 7.4.1799 - https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162
    " Based on Vim patch 7.4.1770 (`guicolors` option) - https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd
    " https://github.com/neovim/neovim/wiki/Following-HEAD#20160511
    if (has('termguicolors'))
        set termguicolors
    endif

    if !has('nvim')
        let &t_ZH="\e[3m"
        let &t_ZR="\e[23m"
    endif
    " 'default' | 'palenight' | 'ocean' | 'lighter' | 'darker' | 'default-community' | 'palenight-community' | 'ocean-community' | 'lighter-community' | 'darker-community'
endif


" --------------------------------------------------
" vim-highlightedyank
" --------------------------------------------------
if has_key(g:plugs, 'vim-highlightedyank')
    if !exists('##TextYankPost')
        map y <Plug>(highlightedyank)
    endif
    let g:highlightedyank_highlight_duration = 150
endif


" --------------------------------------------------
" vim-markbar
" --------------------------------------------------
if has_key(g:plugs, 'vim-markbar')
    nmap <Leader>m <Plug>ToggleMarkbar
endif


" --------------------------------------------------
" vim-better-whitespace
" --------------------------------------------------
if has_key(g:plugs, 'vim-better-whitespace')
    let g:better_whitespace_enabled=1
    let g:strip_whitespace_on_save=1
    let g:strip_whitespace_confirm=0
    let g:strip_whitelines_at_eof=1
    let g:show_spaces_that_precede_tabs=1
    let g:better_whitespace_verbosity=1

    let g:strip_only_modified_lines=1
    nnoremap ]w :NextTrailingWhitespace<CR>
    nnoremap [w :PrevTrailingWhitespace<CR>
    autocmd FileType python,javascript,c,cpp,ruby EnableStripWhitespaceOnSave
    let g:better_whitespace_filetypes_blacklist=['dashboard', 'todoist']
endif


" --------------------------------------------------
" vim-gitgutter
" --------------------------------------------------
if has_key(g:plugs, 'vim-gitgutter')
    let g:gitgutter_grep = 'rg'
    set updatetime=100
    let g:gitgutter_max_signs = -1   " default value (otherwise)
    let _sign = '▌'
    let g:gitgutter_sign_added = _sign
    let g:gitgutter_sign_modified = _sign
    let g:gitgutter_sign_removed = _sign
    let g:gitgutter_sign_removed_first_line = _sign
    let g:gitgutter_sign_removed_above_and_below = '{'
    let g:gitgutter_sign_modified_removed = ''

    " if I want to use another git-plugin
    " let g:gitgutter_sign_allow_clobber = 1

    let g:gitgutter_highlight_lines = 0
    let g:gitgutter_highlight_linenrs = 1
    let g:gitgutter_preview_win_floating = 1
    let g:gitgutter_use_location_list = 1

    function! GitStatus()
        let [a,m,r] = GitGutterGetHunkSummary()
        return printf('+%d ~%d -%d', a, m, r)
    endfunction
    set statusline^=%{GitStatus()}

    nmap <leader>ghhs <Plug>(GitGutterStageHunk)
    nmap <leader>gs <Plug>(GitGutterPreviewHunk)
    nmap <leader>gu <Plug>(GitGutterUndoHunk)
    " in case press c twice
    nmap ≠ <Plug>(GitGutterNextHunk)
    nmap ]c <Plug>(GitGutterNextHunk)
    nmap – <Plug>(GitGutterPrevHunk)
    nmap [c <Plug>(GitGutterPrevHunk)
    " nmap <leader>glt <Plug>(GitGutterLineHighlightsToggle)<cr>

    highlight link GitGutterChangeLine DiffText
    highlight link GitGutterChangeLineNr Underlined
endif


" --------------------------------------------------
" blamer
" --------------------------------------------------
if has_key(g:plugs, 'blamer.nvim')
    let g:blamer_enabled = 0
    let g:blamer_delay = 500
    let g:blamer_show_in_insert_modes = 0
    let g:blamer_prefix = '  『  '
    " let g:blamer_prefix = '     '
    let g:blamer_template = '<committer>, <committer-time> • <summary>』'
    let g:blamer_date_format = '%Y/%m/%d %H:%M'
    " let g:blamer_relative_time = 1
endif


" --------------------------------------------------
" vim-easymotion
" --------------------------------------------------
if has_key(g:plugs, 'vim-easymotion')
    let g:EasyMotion_do_mapping = 0 " Disable default mappings

    " Jump to anywhere you want with minimal keystrokes, with just one key binding.
    " `s{char}{label}`
    nmap s <Plug>(easymotion-overwin-f)
    " or
    " `s{char}{char}{label}`
    " Need one more keystroke, but on average, it may be more comfortable.
    nmap s <Plug>(easymotion-overwin-f2)

    " Turn on case-insensitive feature
    let g:EasyMotion_smartcase = 1

    " JK motions: Line motions
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
endif


" --------------------------------------------------
" goyo.vim
" --------------------------------------------------
if has_key(g:plugs, 'goyo.vim')
    function! s:goyo_enter()
        if executable('tmux') && strlen($TMUX)
            silent !tmux set status off
            silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
        endif
        set noshowmode
        set noshowcmd
        set scrolloff=999
        Limelight
        " ...
    endfunction

    function! s:goyo_leave()
        if executable('tmux') && strlen($TMUX)
            silent !tmux set status on
            silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
        endif
        set showmode
        set showcmd
        set scrolloff=5
        Limelight!
        " ...
    endfunction

    autocmd! User GoyoEnter nested call <SID>goyo_enter()
    autocmd! User GoyoLeave nested call <SID>goyo_leave()
endif


" --------------------------------------------------
" limelight
" --------------------------------------------------
if has_key(g:plugs, 'limelight')
    " Color name (:help cterm-colors) or ANSI code
    let g:limelight_conceal_ctermfg = 'gray'
    let g:limelight_conceal_ctermfg = 240

    " Color name (:help gui-colors) or RGB color
    let g:limelight_conceal_guifg = 'DarkGray'
    let g:limelight_conceal_guifg = '#777777'

    " Default: 0.5
    let g:limelight_default_coefficient = 0.7

    " Number of preceding/following paragraphs to include (default: 0)
    let g:limelight_paragraph_span = 1

    " Beginning/end of paragraph
    "   When there's no empty line between the paragraphs
    "   and each paragraph starts with indentation
    let g:limelight_bop = '^\s'
    let g:limelight_eop = '\ze\n^\s'

    " Highlighting priority (default: 10)
    "   Set it to -1 not to overrule hlsearch
    let g:limelight_priority = -1
    autocmd! User GoyoEnter Limelight
    autocmd! User GoyoLeave Limelight!
    " nmap <space>l <Plug>(Limelight)
    " xmap <space>l <Plug>(Limelight)
    " nnoremap <silent><nowait> <space>l  <Plug>(Limelight)
endif


" --------------------------------------------------
" vim-translator
" --------------------------------------------------
if has_key(g:plugs, 'vim-translator')
    " Echo translation in the cmdline
    nmap <silent> <space>tr <Plug>Translate
    vmap <silent> <space>tr <Plug>TranslateV

    " Display translation in a window
    nmap <silent> <space>tw <Plug>TranslateW
    vmap <silent> <space>tw <Plug>TranslateWV

    " Replace the text with translation
    " nmap <silent> <space>r <Plug>TranslateR
    " vmap <silent> <space>r <Plug>TranslateRV

    " Translate the text in clipboard
    " nmap <silent> <space>x <Plug>TranslateX
endif


" --------------------------------------------------
" vim-easy-align
" --------------------------------------------------
if has_key(g:plugs, 'vim-easy-align')
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
endif


" --------------------------------------------------
" nerdtree-git-plugin
" --------------------------------------------------
if has_key(g:plugs, 'nerdtree-git-plugin')
    let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ "Modified"  : "",
                \ "Staged"    : "✚",
                \ "Untracked" : "✭",
                \ "Renamed"   : "➜",
                \ "Unmerged"  : "═",
                \ "Deleted"   : "✖",
                \ "Dirty"     : "✗",
                \ "Clean"     : "✔︎",
                \ 'Ignored'   : '☒',
                \ "Unknown"   : "?"
                \ }
endif


" --------------------------------------------------
" rainbow_parentheses.vim
" --------------------------------------------------
if has_key(g:plugs, 'rainbow_parentheses.vim')
    let g:rbpt_colorpairs = [
                \ ['brown',       'RoyalBlue3'],
                \ ['Darkblue',    'SeaGreen3'],
                \ ['darkgray',    'DarkOrchid3'],
                \ ['darkgreen',   'firebrick3'],
                \ ['darkcyan',    'RoyalBlue3'],
                \ ['darkred',     'SeaGreen3'],
                \ ['darkmagenta', 'DarkOrchid3'],
                \ ['brown',       'firebrick3'],
                \ ['gray',        'RoyalBlue3'],
                \ ['black',       'SeaGreen3'],
                \ ['darkmagenta', 'DarkOrchid3'],
                \ ['Darkblue',    'firebrick3'],
                \ ['darkgreen',   'RoyalBlue3'],
                \ ['darkcyan',    'SeaGreen3'],
                \ ['darkred',     'DarkOrchid3'],
                \ ['red',         'firebrick3'],
                \ ]

    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
endif


" --------------------------------------------------
" rainbow
" --------------------------------------------------
if has_key(g:plugs, 'rainbow')
    let g:rainbow_active = 1
endif


if has_key(g:plugs, 'far.vim')
    set regexpengine=1
    set ignorecase smartcase  " ignore case only when the pattern contains no capital letters
    " shortcut for far.vim find
    nnoremap <silent> <Find-Shortcut>  :Farf<cr>
    vnoremap <silent> <Find-Shortcut>  :Farf<cr>

    " shortcut for far.vim replace
    nnoremap <silent> <Replace-Shortcut>  :Farr<cr>
    vnoremap <silent> <Replace-Shortcut>  :Farr<cr>
endif

" --------------------------------------------------
" vim-airline
" --------------------------------------------------
if has_key(g:plugs, 'vim-airline')
    " let g:airline_section_b = '%{strftime("%c")}'
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_alt_sep = ''
    let g:airline#extensions#tabline#buffer_nr_show = 0
    let g:airline#extensions#tabline#formatter = 'default'
    let g:airline_theme = 'dark'  " 主题
    let g:airline#extensions#keymap#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#buffer_idx_format = {
                \ '0': ' ',
                \ '1': ' ',
                \ '2': ' ',
                \ '3': ' ',
                \ '4': ' ',
                \ '5': ' ',
                \ '6': ' ',
                \ '7': ' ',
                \ '8': ' ',
                \ '9': ' '
                \}
    nmap <Space>1 <Plug>AirlineSelectTab1
    nmap <Space>2 <Plug>AirlineSelectTab2
    nmap <Space>3 <Plug>AirlineSelectTab3
    nmap <Space>4 <Plug>AirlineSelectTab4
    nmap <Space>5 <Plug>AirlineSelectTab5
    nmap <Space>6 <Plug>AirlineSelectTab6
    nmap <Space>7 <Plug>AirlineSelectTab7
    nmap <Space>8 <Plug>AirlineSelectTab8
    nmap <Space>9 <Plug>AirlineSelectTab9

    nnoremap <F2> :b#<CR>
    nnoremap ‘ :bn<CR>
    nnoremap “ :bp<CR>
endif


" --------------------------------------------------
" vista.vim
" --------------------------------------------------
if has_key(g:plugs, 'vista.vim')
    nmap <F9> :Vista!!<CR>

    function! NearestMethodOrFunction() abort
        return get(b:, 'vista_nearest_method_or_function', '')
    endfunction
    set statusline+=%{NearestMethodOrFunction()}
    autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

    let g:vista#renderer#enable_icon = 1
    let g:vista_default_executive = 'ctags'
    let g:vista_executive_for = {
                \ 'cpp': 'vim_lsp',
                \ 'php': 'vim_lsp',
                \ 'python': 'coc',
                \ }

    " The default icons can't be suitable for all the filetypes, you can extend it as you wish.
    let g:vista#renderer#icons = {
                \   "function": "\uf794",
                \   "variable": "\uf71b",
                \  }
    " let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
    let g:vista_icon_indent = ["▸ ", ""]
endif


" --------------------------------------------------
" semshi
" --------------------------------------------------
if has_key(g:plugs, 'semshi')
    let g:semshi#filetypes = ['python']
    function! MapSemshi() abort
        if &filetype ==# 'python'
            " nmap <silent> <leader>rr :Semshi rename<CR>
            nmap <silent> <Tab> :Semshi goto name next<CR>
            nmap <silent> <S-Tab> :Semshi goto name prev<CR>
            nmap <silent> ]n :Semshi goto class next<CR>
            nmap <silent> [n :Semshi goto class prev<CR>

            nmap <silent> ]f :Semshi goto function next<CR>
            nmap <silent> [f :Semshi goto function prev<CR>
            hi semshiGlobal          ctermfg=red guifg=#ff0000
            sign define semshiError text=E> texthl=semshiErrorSign
        endif
    endfunction
    " nnoremap <silent> <leader>ms :call MapSemshi()<CR>
    autocmd FileType python call MapSemshi()
    " autocmd ColorScheme * call MapSemshi()
endif


" --------------------------------------------------
" vim-snippets
" --------------------------------------------------
if has_key(g:plugs, 'vim-snippets')
    let g:ultisnips_python_style = 'google'
endif


" --------------------------------------------------
" vim-bookmarks
" --------------------------------------------------
if has_key(g:plugs, 'vim-bookmarks')
    " highlight BookmarkSign ctermbg=NONE ctermfg=160
    " highlight BookmarkLine ctermbg=194 ctermfg=NONE
    let g:bookmark_sign = ''
    let g:bookmark_highlight_lines = 1
endif


" --------------------------------------------------
" chadtree
" --------------------------------------------------
if has_key(g:plugs, 'chadtree')
    lua vim.api.nvim_set_var("chadtree_ignores", { name = {".*", ".git"} })
endif


" --------------------------------------------------
" vim-clap
" --------------------------------------------------
if has_key(g:plugs, 'vim-clap')
    " alt+c == ç
    nnoremap <silent> ç :Clap<CR>
    " alt+f == ƒ
    nnoremap <silent> ƒ :Clap files<CR>
    " alt+b == ∫
    nnoremap <silent> ∫ :Clap bcommits<CR>
    " alt+s == ß
    nnoremap <silent> ß :Clap hist<CR>
endif


" --------------------------------------------------
" vim-tasks
" --------------------------------------------------
if has_key(g:plugs, 'vim-tasks')
    let maplocalleader="\<space>"
    " key bindings
    " n/N new tasks
    " t/T mark as tasks
    " b/x/d begin/cancel/done a task
    " a archive a task
    " ml/mm/mh/mc mark task as low/medium/high/critical priority
    " S sort tasks based on priority
endif


" --------------------------------------------------
" undotree
" --------------------------------------------------
if has_key(g:plugs, 'undotree')
    nnoremap <space>h :UndotreeToggle<cr>
    let g:undotree_WindowLayout = 1
    let g:undotree_SplitWidth = 48
    let g:undotree_SetFocusWhenToggle = 1
    if has("persistent_undo")
        set undodir=$HOME/tmp/.undodir
        set undofile
    endif
endif
