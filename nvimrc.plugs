" Customized Plug and Config

if !exists('g:bundle_groups')
    " let g:bundle_groups=['python', 'javascript', 'golang', 'php', 'ruby', 'shell', 'markdown', 'html', 'css', 'less', 'coffeescript', 'tmux', 'json', 'beta']
    let g:bundle_groups=['python', 'markdown', 'javascript']
endif


function HeavyWeight() abort
    Plug 'easymotion/vim-easymotion'
    Plug 'airblade/vim-gitgutter'
endfunction

function EnableAirlineFamily() abort
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    Plug 'tpope/vim-fugitive'
    Plug 'bling/vim-bufferline'
    Plug 'jmcantrell/vim-virtualenv'
endfunction


function EnableLightline() abort
    Plug 'kaicataldo/material.vim', { 'branch': 'main' }
    Plug 'itchyny/lightline.vim'
    Plug 'itchyny/vim-gitbranch'
    Plug 'maximbaz/lightline-ale'
endfunction


function EnableNerdFamily() abort
    " ========== navigation ==========
    Plug 'jistr/vim-nerdtree-tabs'
    Plug 'scrooloose/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'
endfunction


function EnableUiRelated() abort
    " ========== themes ==========
    Plug 'hzchirs/vim-material'
    Plug 'joshdick/onedark.vim'
    " ========== ui ==========
    Plug 'mhinz/vim-startify'
    Plug 'psliwka/vim-smoothie'
    Plug 'Yggdroot/indentLine'
    " ========== programming ==========
    Plug 'luochen1990/rainbow'
    Plug 'tpope/vim-commentary'
    Plug 'jiangmiao/auto-pairs'
endfunction


function WorkEfficiency() abort
    Plug 'justinmk/vim-sneak'
    Plug 'tpope/vim-surround'
    Plug 'mg979/vim-visual-multi', {'branch': 'master'}
endfunction


function TypingMode() abort
    Plug 'junegunn/goyo.vim'
    Plug 'junegunn/limelight.vim'
endfunction


function WorkAsynchronous() abort
    " TODO: read https://github.com/junegunn/fzf.vim
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'prabirshrestha/vim-lsp'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'liuchengxu/vista.vim'
endfunction


function PythonDedicated() abort
    " python
    Plug 'jeetsukumaran/vim-pythonsense'
    " Syntax highlighting
    Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}
    Plug 'Vimjas/vim-python-pep8-indent'
endfunction


function Assistance() abort
    " translation
    Plug 'voldikss/vim-translator'
endfunction

function! InstallMyPlugs() abort
    call EnableUiRelated()
    call EnableAirlineFamily()
    " call EnableLightline()
    call WorkEfficiency()
    call TypingMode()
    call WorkAsynchronous()
    call PythonDedicated()
    call Assistance()
endfunction

call plug#begin('~/.nvim/plugged')
call InstallMyPlugs()
call plug#end()


" ============================================================================
" Plugin configuration
" ============================================================================

" --------------------------------------------------
" startify
" --------------------------------------------------
if has_key(g:plugs, 'startify')
    let g:startify_bookmarks = ['~/svn', '~/dev']
endif


" --------------------------------------------------
" vim-sneak 
" --------------------------------------------------
if has_key(g:plugs, 'vim-sneak')
    " let g:sneak#label = 1 
    nmap = <Plug>Sneak_;
    omap = <Plug>Sneak_;
    xmap = <Plug>Sneak_;
    nmap - <Plug>Sneak_,
    omap - <Plug>Sneak_,
    xmap - <Plug>Sneak_,
endif


" --------------------------------------------------
" lightline 
" --------------------------------------------------
if has_key(g:plugs, 'lightline')
    let g:lightline = {
                \ 'active': {
                \   'left': [[ 'mode', 'paste' ],
                \            [ 'gitbranch', 'readonly', 'filename', 'modified' ]],
                \   'right': [[ 'lineinfo' ],
                \             [ 'percent' ],
                \             [ 'filetype', 'charvaluehex' ]]
                \ },
                \ 'component_function': {
                \   'gitbranch': 'gitbranch#name'
                \ },
                \ }

    let g:lightline.component_expand = {
                \  'linter_checking': 'lightline#ale#checking',
                \  'linter_infos': 'lightline#ale#infos',
                \  'linter_warnings': 'lightline#ale#warnings',
                \  'linter_errors': 'lightline#ale#errors',
                \  'linter_ok': 'lightline#ale#ok',
                \ }

    let g:lightline.component_type = {
                \     'linter_checking': 'right',
                \     'linter_infos': 'right',
                \     'linter_warnings': 'warning',
                \     'linter_errors': 'error',
                \     'linter_ok': 'right',
                \ }

    let g:lightline.active = { 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ]] }
    let g:lightline#ale#indicator_checking = "\uf110"
    let g:lightline#ale#indicator_infos = "\uf129"
    let g:lightline#ale#indicator_warnings = "\uf071"
    let g:lightline#ale#indicator_errors = "\uf05e"
    let g:lightline#ale#indicator_ok = "\uf00c"
endif
" }}}


" --------------------------------------------------
" vim-gitgutter
" --------------------------------------------------
if has_key(g:plugs, 'vim-gitgutter')
    let g:gitgutter_grep = 'ag'
    set updatetime=500
    let g:gitgutter_max_signs = 100  " default value (Vim < 8.1.0614, Neovim < 0.4.0)
    let g:gitgutter_max_signs = -1   " default value (otherwise)
    " Your vimrc
    function! GitStatus()
        let [a,m,r] = GitGutterGetHunkSummary()
        return printf('+%d ~%d -%d', a, m, r)
    endfunction
    set statusline+=%{GitStatus()}
endif

if has_key(g:plugs, 'vim-easymotion')
    let g:EasyMotion_do_mapping = 0 " Disable default mappings

    " Jump to anywhere you want with minimal keystrokes, with just one key binding.
    " `s{char}{label}`
    nmap s <Plug>(easymotion-overwin-f)
    " or
    " `s{char}{char}{label}`
    " Need one more keystroke, but on average, it may be more comfortable.
    nmap s <Plug>(easymotion-overwin-f2)

    " Turn on case-insensitive feature
    let g:EasyMotion_smartcase = 1

    " JK motions: Line motions
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
endif

if has_key(g:plugs, 'goyo.vim')
    function! s:goyo_enter()
        if executable('tmux') && strlen($TMUX)
            silent !tmux set status off
            silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
        endif
        set noshowmode
        set noshowcmd
        set scrolloff=999
        Limelight
        " ...
    endfunction

    function! s:goyo_leave()
        if executable('tmux') && strlen($TMUX)
            silent !tmux set status on
            silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
        endif
        set showmode
        set showcmd
        set scrolloff=5
        Limelight!
        " ...
    endfunction

    autocmd! User GoyoEnter nested call <SID>goyo_enter()
    autocmd! User GoyoLeave nested call <SID>goyo_leave() 
endif


if has_key(g:plugs, 'limelight')
    " Color name (:help cterm-colors) or ANSI code
    let g:limelight_conceal_ctermfg = 'gray'
    let g:limelight_conceal_ctermfg = 240

    " Color name (:help gui-colors) or RGB color
    let g:limelight_conceal_guifg = 'DarkGray'
    let g:limelight_conceal_guifg = '#777777'

    " Default: 0.5
    let g:limelight_default_coefficient = 0.7

    " Number of preceding/following paragraphs to include (default: 0)
    let g:limelight_paragraph_span = 1

    " Beginning/end of paragraph
    "   When there's no empty line between the paragraphs
    "   and each paragraph starts with indentation
    let g:limelight_bop = '^\s'
    let g:limelight_eop = '\ze\n^\s'

    " Highlighting priority (default: 10)
    "   Set it to -1 not to overrule hlsearch
    let g:limelight_priority = -1 
    autocmd! User GoyoEnter Limelight
    autocmd! User GoyoLeave Limelight!
    " nmap <space>l <Plug>(Limelight)
    " xmap <space>l <Plug>(Limelight)
    nnoremap <silent><nowait> <space>l  <Plug>(Limelight)
endif


if has_key(g:plugs, 'vim-translator')
    " Echo translation in the cmdline
    nmap <silent> <space>tr <Plug>Translate
    vmap <silent> <space>tr <Plug>TranslateV

    " Display translation in a window
    nmap <silent> <space>tw <Plug>TranslateW
    vmap <silent> <space>tw <Plug>TranslateWV

    " Replace the text with translation
    " nmap <silent> <space>r <Plug>TranslateR
    " vmap <silent> <space>r <Plug>TranslateRV

    " Translate the text in clipboard
    " nmap <silent> <space>x <Plug>TranslateX
endif

" ==================== nerdtree ====================
" nerdtree nerdtreetabs {{{
if has_key(g:plugs, 'vim-nerdtree-tabs')
    " map <leader>n :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'

    " nerdtreetabs
    map <Leader>t <plug>NERDTreeTabsToggle<CR>
    " 关闭同步
    " let g:nerdtree_tabs_synchronize_view=0
    " let g:nerdtree_tabs_synchronize_focus=0
    " 是否自动开启nerdtree
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:nerdtree_tabs_open_on_gui_startup=0
endif
" }}}

" ==================== nerdtree-git-plugin ====================
" nerdtree git plugin {{{
if has_key(g:plugs, 'nerdtree-git-plugin')
    let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ "Modified"  : "",
                \ "Staged"    : "✚",
                \ "Untracked" : "✭",
                \ "Renamed"   : "➜",
                \ "Unmerged"  : "═",
                \ "Deleted"   : "✖",
                \ "Dirty"     : "✗",
                \ "Clean"     : "✔︎",
                \ 'Ignored'   : '☒',
                \ "Unknown"   : "?"
                \ }
endif
" }}}

" #################### rainbow_parentheses ####################
" rainbow_parentheses {{{
if has_key(g:plugs, 'rainbow_parentheses.vim')
    let g:rbpt_colorpairs = [
                \ ['brown',       'RoyalBlue3'],
                \ ['Darkblue',    'SeaGreen3'],
                \ ['darkgray',    'DarkOrchid3'],
                \ ['darkgreen',   'firebrick3'],
                \ ['darkcyan',    'RoyalBlue3'],
                \ ['darkred',     'SeaGreen3'],
                \ ['darkmagenta', 'DarkOrchid3'],
                \ ['brown',       'firebrick3'],
                \ ['gray',        'RoyalBlue3'],
                \ ['black',       'SeaGreen3'],
                \ ['darkmagenta', 'DarkOrchid3'],
                \ ['Darkblue',    'firebrick3'],
                \ ['darkgreen',   'RoyalBlue3'],
                \ ['darkcyan',    'SeaGreen3'],
                \ ['darkred',     'DarkOrchid3'],
                \ ['red',         'firebrick3'],
                \ ]

    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
endif
" }}}


" ==================== rainbow ====================
" rainbow {{{
if has_key(g:plugs, 'rainbow')
    let g:rainbow_active = 1
endif
" }}}

" #################### indentLine ####################
" indentLine {{{
if has_key(g:plugs, 'indentLine')
    let g:indentLine_setColors = 0
    let g:indentLine_char = '┆'
    let g:indentLine_color_dark = 1
    let g:indentLine_concealcursor = 'inc'
    let g:indentLine_conceallevel = 2
    let g:indentLine_faster             = 1
    let g:indentLine_leadingSpaceChar   = '·'
    " let g:indentLine_fileTypeExclude    = ['json',  'startify', '', 'help', 'coc-explorer']
    " let g:indentLine_setConceal = 0
endif
" }}}

" ==================== vim-airline ====================
" vim-airline {{{
if has_key(g:plugs, 'vim-airline')
    " let g:airline_section_b = '%{strftime("%c")}'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#tabline#buffer_nr_show = 0
    let g:airline#extensions#tabline#formatter = 'default'
    let g:airline_theme = 'desertink'  " 主题
    let g:airline#extensions#keymap#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#buffer_idx_format = {
                \ '0': '0 ',
                \ '1': '1 ',
                \ '2': '2 ',
                \ '3': '3 ',
                \ '4': '4 ',
                \ '5': '5 ',
                \ '6': '6 ',
                \ '7': '7 ',
                \ '8': '8 ',
                \ '9': '9 '
                \}
    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9
endif
" }}}

" ==================== vista.vim ====================
" vista.vim {{{
if has_key(g:plugs, 'vista.vim')
    nmap <F9> :Vista!!<CR>

    function! NearestMethodOrFunction() abort
        return get(b:, 'vista_nearest_method_or_function', '')
    endfunction
    set statusline+=%{NearestMethodOrFunction()}
    autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

    let g:vista#renderer#enable_icon = 1
    let g:vista_default_executive = 'ctags'
    let g:vista_executive_for = {
                \ 'cpp': 'vim_lsp',
                \ 'php': 'vim_lsp',
                \ 'python': 'coc',
                \ }
    let g:vista_fzf_preview = ['right:50%']

    " The default icons can't be suitable for all the filetypes, you can extend it as you wish.
    let g:vista#renderer#icons = {
                \   "function": "\uf794",
                \   "variable": "\uf71b",
                \  }
    " let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
    let g:vista_icon_indent = ["▸ ", ""]
endif
" }}}


if has_key(g:plugs, 'fzf')
    let $FZF_DEFAULT_OPTS = '--reverse'
    let $BAT_THEME = 'OneHalfDark'
    let g:fzf_layout = { 'window': 'call OpenFloatingWin()' }

    command! -bang -nargs=* Rg
                \ call fzf#vim#grep(
                \   'rg --column --line-number --no-heading --fixed-strings --color=always --glob "!.git/*" --smart-case '.shellescape(<q-args>), 1,
                \   <bang>0 ? fzf#vim#with_preview()
                \           : fzf#vim#with_preview(),
                \   <bang>0)

    command! -bang -nargs=? -complete=dir GFiles
                \ call fzf#vim#gitfiles(
                \   <q-args>,
                \   fzf#vim#with_preview(),
                \   <bang>0)

    function! OpenFloatingWin()
        let width = min([&columns - 4, max([80, &columns - 20])])
        let height = min([&lines - 4, max([20, &lines - 10])])
        let top = ((&lines - height) / 2) - 1
        let left = (&columns - width) / 2
        let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

        let top = "╭" . repeat("─", width - 2) . "╮"
        let mid = "│" . repeat(" ", width - 2) . "│"
        let bot = "╰" . repeat("─", width - 2) . "╯"
        let lines = [top] + repeat([mid], height - 2) + [bot]
        let s:buf = nvim_create_buf(v:false, v:true)
        call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
        call nvim_open_win(s:buf, v:true, opts)
        set winhl=Normal:Floating
        let opts.row += 1
        let opts.height -= 2
        let opts.col += 2
        let opts.width -= 4
        call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
        au BufWipeout <buffer> exe 'bw '.s:buf
    endfunction
    nnoremap <C-p> :GFiles<cr>
    nnoremap <S-S> :GFiles<cr>
endif

" --------------------------------------------------
" semshi
" --------------------------------------------------
if has_key(g:plugs, 'semshi')
    " nmap <silent> <leader>rr :Semshi rename<CR>
    nmap <silent> <Tab> :Semshi goto name next<CR>
    nmap <silent> <S-Tab> :Semshi goto name prev<CR>
    nmap <silent> <leader>c :Semshi goto class next<CR>
    nmap <silent> <leader>C :Semshi goto class prev<CR>

    nmap <silent> <leader>f :Semshi goto function next<CR>
    nmap <silent> <leader>F :Semshi goto function prev<CR>

    " nmap <silent> <leader>gu :Semshi goto unresolved first<CR>
    " nmap <silent> <leader>gp :Semshi goto parameterUnused first<CR>
    " nmap <silent> <leader>ee :Semshi error<CR>
    " nmap <silent> <leader>ge :Semshi goto error<CR>

    " hi semshiLocal           ctermfg=209 guifg=#ff875f
    " hi semshiGlobal          ctermfg=214 guifg=#ffaf00
    " hi semshiImported        ctermfg=214 guifg=#ffaf00 cterm=bold gui=bold
    " hi semshiParameter       ctermfg=75  guifg=#5fafff
    " hi semshiParameterUnused ctermfg=117 guifg=#87d7ff cterm=underline gui=underline
    " hi semshiFree            ctermfg=218 guifg=#ffafd7
    " hi semshiBuiltin         ctermfg=207 guifg=#ff5fff
    " hi semshiAttribute       ctermfg=49  guifg=#00ffaf
    " hi semshiSelf            ctermfg=249 guifg=#b2b2b2
    " hi semshiUnresolved      ctermfg=226 guifg=#ffff00 cterm=underline gui=underline
    " hi semshiSelected        ctermfg=231 guifg=#ffffff ctermbg=161 guibg=#d7005f

    " hi semshiErrorSign       ctermfg=231 guifg=#ffffff ctermbg=160 guibg=#d70000
    " hi semshiErrorChar       ctermfg=231 guifg=#ffffff ctermbg=160 guibg=#d70000
    " sign define semshiError text=E> texthl=semshiErrorSign
    let g:semshi#filetypes = ['python']
    let g:semshi#mark_selected_nodes = 1
endif
" }}}

if has_key(g:plugs, 'coc.nvim')
    let g:coc_global_extensions = [
                \ 'coc-explorer',
                \ 'coc-flutter-tools',
                \ 'coc-git',
                \ 'coc-highlight',
                \ 'coc-json',
                \ 'coc-markdownlint',
                \ 'coc-pairs',
                \ 'coc-python',
                \ 'coc-sh',
                \ 'coc-snippets',
                \ 'coc-syntax',
                \ 'coc-vimlsp',
                \ 'coc-yaml'
                \]

    nnoremap <leader>t :CocCommand explorer<cr>
    " TextEdit might fail if hidden is not set.
    set hidden
    set nowritebackup
    set cmdheight=2

    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable delays and poor user experience.
    set updatetime=300

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("patch-8.1.1564")
        " Recently vim can merge signcolumn and number column into one
        set signcolumn=number
    else
        set signcolumn=yes
    endif

    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    if has('nvim')
        inoremap <silent><expr> <c-space> coc#refresh()
    else
        inoremap <silent><expr> <c-@> coc#refresh()
    endif

    " Make <CR> auto-select the first completion item and notify coc.nvim to
    " format on enter, <cr> could be remapped by other vim plugin
    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        elseif (coc#rpc#ready())
            call CocActionAsync('doHover')
        else
            execute '!' . &keywordprg . " " . expand('<cword>')
        endif
    endfunction

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)
    autocmd FileType python let b:coc_root_patterns = ['.git', '.env', 'setup.cfg', 'setup.py', 'pyproject.toml']
    augroup mygroup
        autocmd!
        " Setup formatexpr specified filetype(s).
        autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
        " Update signature help on jump placeholder.
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " hi CocHighlightText guibg=#556873 gui=bold

    " Applying codeAction to the selected region.
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying codeAction to the current buffer.
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Apply AutoFix to problem on the current line.
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Map function and class text objects
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)

    " Remap <C-f> and <C-b> for scroll float windows/popups.
    nnoremap <expr><C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <expr><C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <expr><C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<Right>"
    inoremap <expr><C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<Left>"

    " Use CTRL-S for selections ranges.
    " Requires 'textDocument/selectionRange' support of language server.
    nmap <silent> <C-s> <Plug>(coc-range-select)
    xmap <silent> <C-s> <Plug>(coc-range-select)

    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')

    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    " Mappings for CoCList
    " Show all diagnostics.
    nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions.
    nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
    " Show commands.
    nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document.
    nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols.
    nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list.
    nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

    " Add (Neo)Vim's native statusline support.
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: vim-airline.
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}


    if index(g:coc_global_extensions, 'coc-git') != -1
        set statusline^=%{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}
        autocmd User CocGitStatusChange {command}
        " navigate chunks of current buffer
        nmap [c <Plug>(coc-git-prevchunk)
        nmap ]c <Plug>(coc-git-nextchunk)
        " show chunk diff at current position
        nmap gs <Plug>(coc-git-chunkinfo)
        " show commit contains current position
        nmap gh <Plug>(coc-git-commit)
        " create text object for git chunks
        omap gi <Plug>(coc-git-chunk-inner)
        xmap gi <Plug>(coc-git-chunk-inner)
        omap ga <Plug>(coc-git-chunk-outer)
        xmap ga <Plug>(coc-git-chunk-outer)
        nnoremap <silent> <space>g :<C-u>CocList --normal gstatus<CR>
    endif
endif
