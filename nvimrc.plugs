" Customized Plug and Config

if !exists('g:bundle_groups')
    " let g:bundle_groups=['python', 'javascript', 'golang', 'php', 'ruby', 'shell', 'markdown', 'html', 'css', 'less', 'coffeescript', 'tmux', 'json', 'beta']
    let g:bundle_groups=['python', 'markdown', 'javascript']
endif


function! UnusedPlugins() abort
    """"" same as sneak
    Plug 'easymotion/vim-easymotion'
    """"" fzf.vim using coc-fzf-preview
    Plug 'junegunn/fzf.vim'
    """"" same as fzf.vim, but has the ability to use C-d/C-u to go half-page-down/up for preview buffer
    Plug 'yuki-ycino/fzf-preview.vim', { 'branch': 'release', 'do': ':UpdateRemotePlugins' }
    """"" same but lighter than coc.nvim
    Plug 'prabirshrestha/vim-lsp'
    " Plug 'jmcantrell/vim-virtualenv'
endfunction

function! EnableAirlineFamily() abort
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'junegunn/gv.vim'
    Plug 'tpope/vim-fugitive'
    Plug 'airblade/vim-gitgutter'
    Plug 'APZelos/blamer.nvim'
endfunction


function! EnableLightline() abort
    Plug 'kaicataldo/material.vim', { 'branch': 'main' }
    Plug 'itchyny/lightline.vim'
    Plug 'itchyny/vim-gitbranch'
    Plug 'maximbaz/lightline-ale'
endfunction


function! EnableNerdFamily() abort
    " ========== navigation ==========
    Plug 'jistr/vim-nerdtree-tabs'
    Plug 'scrooloose/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'
endfunction


function! EnableUiRelated() abort
    " ========== themes ==========
    Plug 'hzchirs/vim-material'
    Plug 'joshdick/onedark.vim'
    Plug 'jsit/toast.vim'
    " ========== ui ==========
    Plug 'mhinz/vim-startify'
    Plug 'psliwka/vim-smoothie'
    Plug 'Yggdroot/indentLine'
    " ========== programming ==========
    Plug 'luochen1990/rainbow'
    Plug 'tpope/vim-commentary'
    Plug 'jiangmiao/auto-pairs'
endfunction


function! WorkEfficiency() abort
    Plug 'justinmk/vim-sneak'
    Plug 'tpope/vim-surround'
    Plug 'mg979/vim-visual-multi', {'branch': 'master'}
    Plug 'yilin-yang/vim-markbar'
    Plug 'ntpeters/vim-better-whitespace'
    Plug 'wellle/context.vim'
endfunction


function! TypingMode() abort
    Plug 'junegunn/goyo.vim'
    Plug 'junegunn/limelight.vim'
endfunction


function! WorkAsynchronous() abort
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'liuchengxu/vista.vim'
    Plug 'MattesGroeger/vim-bookmarks'
    Plug 'ryanoasis/vim-devicons'
    Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
    Plug 'ms-jpq/chadtree', {'branch': 'chad', 'do': ':UpdateRemotePlugins'}
    Plug 'yuki-ycino/fzf-preview.vim', { 'branch': 'release', 'do': ':UpdateRemotePlugins' }
endfunction


function! PythonDedicated() abort
    Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
endfunction


function! Assistance() abort
    Plug 'voldikss/vim-translator'
endfunction

function! InstallMyPlugs() abort
    call EnableUiRelated()
    call EnableAirlineFamily()
    call WorkEfficiency()
    call TypingMode()
    call WorkAsynchronous()
    call PythonDedicated()
    call Assistance()
endfunction

call plug#begin('~/.nvim/plugged')
call InstallMyPlugs()
call plug#end()


" ============================================================================
" Plugin configuration
" ============================================================================


" --------------------------------------------------
" startify
" --------------------------------------------------
if has_key(g:plugs, 'vim-startify')
    let g:startify_session_dir = '~/.config/nvim/session'
    let g:startify_session_autoload = 1
    let g:startify_session_delete_buffers = 1
    let g:startify_change_to_vcs_root = 1
    let g:startify_fortune_use_unicode = 1
    let g:startify_session_persistence = 1
    let g:startify_enable_special = 0

    " returns all modified files of the current git repo
    " `2>/dev/null` makes the command fail quietly, so that when we are not
    " in a git repo, the list will be empty
    function! s:gitModified()
        let files = systemlist('git ls-files -m 2>/dev/null')
        return map(files, "{'line': v:val, 'path': v:val}")
    endfunction

    " same as above, but show untracked files, honouring .gitignore
    function! s:gitUntracked()
        let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
        return map(files, "{'line': v:val, 'path': v:val}")
    endfunction

    let g:startify_lists = [
        \ { 'type': 'sessions',  'header': ['   Sessions']       },
        \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
        \ { 'type': 'files',     'header': ['   MRU']            },
        \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
        \ { 'type': function('s:gitModified'),  'header': ['   git modified']},
        \ { 'type': function('s:gitUntracked'), 'header': ['   git untracked']},
        \ { 'type': 'commands',  'header': ['   Commands']       },
        \ ]
    " autocmd BufEnter *
    "    \ if !exists('t:startify_new_tab') && empty(expand('%')) && !exists('t:goyo_master') |
    "    \   let t:startify_new_tab = 1 |
    "    \   Startify |
    "    \ endif
endif


" --------------------------------------------------
" vim-sneak
" --------------------------------------------------
if has_key(g:plugs, 'vim-sneak')
    " let g:sneak#label = 1
    nmap = <Plug>Sneak_;
    omap = <Plug>Sneak_;
    xmap = <Plug>Sneak_;
    nmap - <Plug>Sneak_,
    omap - <Plug>Sneak_,
    xmap - <Plug>Sneak_,
endif


" --------------------------------------------------
" vim-markbar
" --------------------------------------------------
if has_key(g:plugs, 'vim-markbar')
    nmap <Leader>m <Plug>ToggleMarkbar
endif


" --------------------------------------------------
" vim-better-whitespace
" --------------------------------------------------
if has_key(g:plugs, 'vim-better-whitespace')
    let g:better_whitespace_enabled=1
    let g:strip_whitespace_on_save=1
    let g:strip_whitespace_confirm=0
    let g:strip_whitelines_at_eof=1
    let g:show_spaces_that_precede_tabs=1
    let g:better_whitespace_verbosity=1

    let g:strip_only_modified_lines=1
    nnoremap ]w :NextTrailingWhitespace<CR>
    nnoremap [w :PrevTrailingWhitespace<CR>
    autocmd FileType python,javascript,c,cpp,ruby EnableStripWhitespaceOnSave
endif


" --------------------------------------------------
" lightline
" --------------------------------------------------
if has_key(g:plugs, 'lightline')
    let g:lightline = {
                \ 'active': {
                \   'left': [[ 'mode', 'paste' ],
                \            [ 'gitbranch', 'readonly', 'filename', 'modified' ]],
                \   'right': [[ 'lineinfo' ],
                \             [ 'percent' ],
                \             [ 'filetype', 'charvaluehex' ]]
                \ },
                \ 'component_function': {
                \   'gitbranch': 'gitbranch#name'
                \ },
                \ }

    let g:lightline.component_expand = {
                \  'linter_checking': 'lightline#ale#checking',
                \  'linter_infos': 'lightline#ale#infos',
                \  'linter_warnings': 'lightline#ale#warnings',
                \  'linter_errors': 'lightline#ale#errors',
                \  'linter_ok': 'lightline#ale#ok',
                \ }

    let g:lightline.component_type = {
                \     'linter_checking': 'right',
                \     'linter_infos': 'right',
                \     'linter_warnings': 'warning',
                \     'linter_errors': 'error',
                \     'linter_ok': 'right',
                \ }

    let g:lightline.active = { 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ]] }
    let g:lightline#ale#indicator_checking = "\uf110"
    let g:lightline#ale#indicator_infos = "\uf129"
    let g:lightline#ale#indicator_warnings = "\uf071"
    let g:lightline#ale#indicator_errors = "\uf05e"
    let g:lightline#ale#indicator_ok = "\uf00c"
endif


" --------------------------------------------------
" vim-gitgutter
" --------------------------------------------------
if has_key(g:plugs, 'vim-gitgutter')
    let g:gitgutter_grep = 'rg'
    set updatetime=100
    let g:gitgutter_max_signs = -1   " default value (otherwise)
    let _sign = '▌'
    let g:gitgutter_sign_added = _sign
    let g:gitgutter_sign_modified = _sign
    let g:gitgutter_sign_removed = _sign
    let g:gitgutter_sign_removed_first_line = _sign
    let g:gitgutter_sign_removed_above_and_below = '{'
    let g:gitgutter_sign_modified_removed = ''

    " if I want to use another git-plugin
    " let g:gitgutter_sign_allow_clobber = 1

    let g:gitgutter_highlight_lines = 0
    let g:gitgutter_highlight_linenrs = 1
    let g:gitgutter_preview_win_floating = 1
    let g:gitgutter_use_location_list = 1

    function! GitStatus()
        let [a,m,r] = GitGutterGetHunkSummary()
        return printf('+%d ~%d -%d', a, m, r)
    endfunction
    set statusline^=%{GitStatus()}

    nmap <leader>ghhs <Plug>(GitGutterStageHunk)
    nmap <leader>gs <Plug>(GitGutterPreviewHunk)
    nmap <leader>gu <Plug>(GitGutterUndoHunk)
    " in case press c twice
    nmap ≠ <Plug>(GitGutterNextHunk)
    nmap ]c <Plug>(GitGutterNextHunk)
    nmap – <Plug>(GitGutterPrevHunk)
    nmap [c <Plug>(GitGutterPrevHunk)
    " nmap <leader>glt <Plug>(GitGutterLineHighlightsToggle)<cr>

    highlight link GitGutterChangeLine DiffText
    highlight link GitGutterChangeLineNr Underlined
endif


" --------------------------------------------------
" blamer
" --------------------------------------------------
if has_key(g:plugs, 'blamer.nvim')
    let g:blamer_enabled = 1
    let g:blamer_delay = 500
    let g:blamer_show_in_insert_modes = 0
    let g:blamer_prefix = '  『  '
    " let g:blamer_prefix = '     '
    let g:blamer_template = '<committer>, <committer-time> • <summary>』'
    let g:blamer_date_format = '%Y/%m/%d %H:%M'
    " let g:blamer_relative_time = 1
endif


" --------------------------------------------------
" vim-easymotion
" --------------------------------------------------
if has_key(g:plugs, 'vim-easymotion')
    let g:EasyMotion_do_mapping = 0 " Disable default mappings

    " Jump to anywhere you want with minimal keystrokes, with just one key binding.
    " `s{char}{label}`
    nmap s <Plug>(easymotion-overwin-f)
    " or
    " `s{char}{char}{label}`
    " Need one more keystroke, but on average, it may be more comfortable.
    nmap s <Plug>(easymotion-overwin-f2)

    " Turn on case-insensitive feature
    let g:EasyMotion_smartcase = 1

    " JK motions: Line motions
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
endif


" --------------------------------------------------
" goyo.vim
" --------------------------------------------------
if has_key(g:plugs, 'goyo.vim')
    function! s:goyo_enter()
        if executable('tmux') && strlen($TMUX)
            silent !tmux set status off
            silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
        endif
        set noshowmode
        set noshowcmd
        set scrolloff=999
        Limelight
        " ...
    endfunction

    function! s:goyo_leave()
        if executable('tmux') && strlen($TMUX)
            silent !tmux set status on
            silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
        endif
        set showmode
        set showcmd
        set scrolloff=5
        Limelight!
        " ...
    endfunction

    autocmd! User GoyoEnter nested call <SID>goyo_enter()
    autocmd! User GoyoLeave nested call <SID>goyo_leave()
endif


" --------------------------------------------------
" limelight
" --------------------------------------------------
if has_key(g:plugs, 'limelight')
    " Color name (:help cterm-colors) or ANSI code
    let g:limelight_conceal_ctermfg = 'gray'
    let g:limelight_conceal_ctermfg = 240

    " Color name (:help gui-colors) or RGB color
    let g:limelight_conceal_guifg = 'DarkGray'
    let g:limelight_conceal_guifg = '#777777'

    " Default: 0.5
    let g:limelight_default_coefficient = 0.7

    " Number of preceding/following paragraphs to include (default: 0)
    let g:limelight_paragraph_span = 1

    " Beginning/end of paragraph
    "   When there's no empty line between the paragraphs
    "   and each paragraph starts with indentation
    let g:limelight_bop = '^\s'
    let g:limelight_eop = '\ze\n^\s'

    " Highlighting priority (default: 10)
    "   Set it to -1 not to overrule hlsearch
    let g:limelight_priority = -1
    autocmd! User GoyoEnter Limelight
    autocmd! User GoyoLeave Limelight!
    " nmap <space>l <Plug>(Limelight)
    " xmap <space>l <Plug>(Limelight)
    " nnoremap <silent><nowait> <space>l  <Plug>(Limelight)
endif


" --------------------------------------------------
" vim-translator
" --------------------------------------------------
if has_key(g:plugs, 'vim-translator')
    " Echo translation in the cmdline
    nmap <silent> <space>tr <Plug>Translate
    vmap <silent> <space>tr <Plug>TranslateV

    " Display translation in a window
    nmap <silent> <space>tw <Plug>TranslateW
    vmap <silent> <space>tw <Plug>TranslateWV

    " Replace the text with translation
    " nmap <silent> <space>r <Plug>TranslateR
    " vmap <silent> <space>r <Plug>TranslateRV

    " Translate the text in clipboard
    " nmap <silent> <space>x <Plug>TranslateX
endif


" --------------------------------------------------
" vim-nerdtree-tabs
" --------------------------------------------------
if has_key(g:plugs, 'vim-nerdtree-tabs')
    " map <leader>n :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'

    " nerdtreetabs
    map <Leader>t <plug>NERDTreeTabsToggle<CR>
    " 关闭同步
    " let g:nerdtree_tabs_synchronize_view=0
    " let g:nerdtree_tabs_synchronize_focus=0
    " 是否自动开启nerdtree
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:nerdtree_tabs_open_on_gui_startup=0
endif


" --------------------------------------------------
" nerdtree-git-plugin
" --------------------------------------------------
if has_key(g:plugs, 'nerdtree-git-plugin')
    let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ "Modified"  : "",
                \ "Staged"    : "✚",
                \ "Untracked" : "✭",
                \ "Renamed"   : "➜",
                \ "Unmerged"  : "═",
                \ "Deleted"   : "✖",
                \ "Dirty"     : "✗",
                \ "Clean"     : "✔︎",
                \ 'Ignored'   : '☒',
                \ "Unknown"   : "?"
                \ }
endif


" --------------------------------------------------
" rainbow_parentheses.vim
" --------------------------------------------------
if has_key(g:plugs, 'rainbow_parentheses.vim')
    let g:rbpt_colorpairs = [
                \ ['brown',       'RoyalBlue3'],
                \ ['Darkblue',    'SeaGreen3'],
                \ ['darkgray',    'DarkOrchid3'],
                \ ['darkgreen',   'firebrick3'],
                \ ['darkcyan',    'RoyalBlue3'],
                \ ['darkred',     'SeaGreen3'],
                \ ['darkmagenta', 'DarkOrchid3'],
                \ ['brown',       'firebrick3'],
                \ ['gray',        'RoyalBlue3'],
                \ ['black',       'SeaGreen3'],
                \ ['darkmagenta', 'DarkOrchid3'],
                \ ['Darkblue',    'firebrick3'],
                \ ['darkgreen',   'RoyalBlue3'],
                \ ['darkcyan',    'SeaGreen3'],
                \ ['darkred',     'DarkOrchid3'],
                \ ['red',         'firebrick3'],
                \ ]

    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
endif


" --------------------------------------------------
" rainbow
" --------------------------------------------------
if has_key(g:plugs, 'rainbow')
    let g:rainbow_active = 1
endif


" --------------------------------------------------
" indentLine
" --------------------------------------------------
if has_key(g:plugs, 'indentLine')
    let g:indentLine_setColors = 0
    let g:indentLine_char = '┆'
    let g:indentLine_color_dark = 1
    let g:indentLine_concealcursor = 'inc'
    let g:indentLine_conceallevel = 2
    let g:indentLine_faster             = 1
    let g:indentLine_leadingSpaceChar   = '·'
    let g:indentLine_fileTypeExclude    = ['json', 'startify', '', 'help']
    let g:indentLine_setConceal = 0
endif


" --------------------------------------------------
" vim-airline
" --------------------------------------------------
if has_key(g:plugs, 'vim-airline')
    " let g:airline_section_b = '%{strftime("%c")}'
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_alt_sep = ''
    let g:airline#extensions#tabline#buffer_nr_show = 0
    let g:airline#extensions#tabline#formatter = 'default'
    let g:airline_theme = 'dark'  " 主题
    let g:airline#extensions#keymap#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#buffer_idx_format = {
                \ '0': '0 ',
                \ '1': '1 ',
                \ '2': '2 ',
                \ '3': '3 ',
                \ '4': '4 ',
                \ '5': '5 ',
                \ '6': '6 ',
                \ '7': '7 ',
                \ '8': '8 ',
                \ '9': '9 '
                \}
    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9

    nnoremap <F2> :b#<CR>
    nnoremap = :bn<CR>
    nnoremap - :bp<CR>
endif


" --------------------------------------------------
" vista.vim
" --------------------------------------------------
if has_key(g:plugs, 'vista.vim')
    nmap <F9> :Vista!!<CR>

    function! NearestMethodOrFunction() abort
        return get(b:, 'vista_nearest_method_or_function', '')
    endfunction
    set statusline+=%{NearestMethodOrFunction()}
    autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

    let g:vista#renderer#enable_icon = 1
    let g:vista_default_executive = 'ctags'
    let g:vista_executive_for = {
                \ 'cpp': 'vim_lsp',
                \ 'php': 'vim_lsp',
                \ 'python': 'coc',
                \ }

    " The default icons can't be suitable for all the filetypes, you can extend it as you wish.
    let g:vista#renderer#icons = {
                \   "function": "\uf794",
                \   "variable": "\uf71b",
                \  }
    " let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
    let g:vista_icon_indent = ["▸ ", ""]
endif


" --------------------------------------------------
" fzf.vim
" --------------------------------------------------
if has_key(g:plugs, 'fzf.vim')
    " INFO: https://github.com/junegunn/fzf.vim/issues/453
    " INFO: https://github.com/junegunn/fzf.vim/pull/819
    let $FZF_DEFAULT_OPTS = '--reverse'
    let $BAT_THEME = 'OneHalfDark'
    let $FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'

    let g:fzf_buffers_jump = 1
    let g:fzf_commits_log_options = "--color --graph --date=format:'%m/%d %H:%M' --pretty=format:'%C(yellow)%h%Creset%C(red)%d%Creset %s %Cred『%C(bold blue)%an, %Cgreen%cd%Cred』%Creset'"

    " command! -bang -nargs=? -complete=dir Files call fzf#vim#files(<q-args>, <bang>0)
    " command! -bang -nargs=? -complete=dir Files call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
    " let g:fzf_layout = { 'window': 'call OpenFloatingWin()' }

    command! -bang -nargs=* Rg
                \ call fzf#vim#grep(
                \   'rg --column --line-number --no-heading --fixed-strings --color=always --glob "!.git/*" --smart-case '.shellescape(<q-args>), 1,
                \   <bang>0 ? fzf#vim#with_preview()
                \           : fzf#vim#with_preview(),
                \   <bang>0)

    command! -bang -nargs=? -complete=dir GFiles
                \ call fzf#vim#gitfiles(
                \   <q-args>,
                \   fzf#vim#with_preview(),
                \   <bang>0)

    function! OpenFloatingWin()
        let width = min([&columns - 4, max([120, &columns - 10])])
        let height = min([&lines - 4, max([20, &lines - 5])])
        let top = ((&lines - height) / 2) - 1
        let left = (&columns - width) / 2
        let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

        let top = "╭" . repeat("─", width - 2) . "╮"
        let mid = "│" . repeat(" ", width - 2) . "│"
        let bot = "╰" . repeat("─", width - 2) . "╯"
        let lines = [top] + repeat([mid], height - 2) + [bot]
        let s:buf = nvim_create_buf(v:false, v:true)
        call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
        call nvim_open_win(s:buf, v:true, opts)
        set winhl=Normal:Floating
        let opts.row += 1
        let opts.height -= 2
        let opts.col += 2
        let opts.width -= 4
        call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
        au BufWipeout <buffer> exe 'bw '.s:buf
    endfunction

    function! RipgrepFzf(query, fullscreen)
        let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
        let initial_command = printf(command_fmt, shellescape(a:query))
        let reload_command = printf(command_fmt, '{q}')
        let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
        call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
    endfunction
    command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)

    nnoremap <silent> <C-\> :Rg<cr>
    " nnoremap <silent> <Space>f :Files<cr>
    " nnoremap <silent> <Space>g :GFiles<cr>
endif


" --------------------------------------------------
" semshi
" --------------------------------------------------
if has_key(g:plugs, 'semshi')
    let g:semshi#filetypes = ['python']
    function! MapSemshi() abort
        if &filetype ==# 'python'
            " nmap <silent> <leader>rr :Semshi rename<CR>
            nmap <silent> <Tab> :Semshi goto name next<CR>
            nmap <silent> <S-Tab> :Semshi goto name prev<CR>
            nmap <silent> ]n :Semshi goto class next<CR>
            nmap <silent> [n :Semshi goto class prev<CR>

            nmap <silent> ]f :Semshi goto function next<CR>
            nmap <silent> [f :Semshi goto function prev<CR>
            hi semshiGlobal          ctermfg=red guifg=#ff0000
            sign define semshiError text=E> texthl=semshiErrorSign
        endif
    endfunction
    " nnoremap <silent> <leader>ms :call MapSemshi()<CR>
    autocmd FileType python call MapSemshi()
    " autocmd ColorScheme * call MapSemshi()
endif


" --------------------------------------------------
" vim-snippets
" --------------------------------------------------
if has_key(g:plugs, 'vim-snippets')
    let g:ultisnips_python_style = 'google'
endif


" --------------------------------------------------
" vim-bookmarks
" --------------------------------------------------
if has_key(g:plugs, 'vim-bookmarks')
    " highlight BookmarkSign ctermbg=NONE ctermfg=160
    " highlight BookmarkLine ctermbg=194 ctermfg=NONE
    let g:bookmark_sign = ''
    let g:bookmark_highlight_lines = 1
endif


" --------------------------------------------------
" chadtree
" --------------------------------------------------
if has_key(g:plugs, 'chadtree')
    lua vim.api.nvim_set_var("chadtree_ignores", { name = {".*", ".git"} })
endif


" --------------------------------------------------
" vim-clap
" --------------------------------------------------
if has_key(g:plugs, 'vim-clap')
    " alt+c == ç
    nnoremap <silent> ç :Clap<CR>
    " alt+f == ƒ
    nnoremap <silent> ƒ :Clap files<CR>
    " alt+b == ∫
    nnoremap <silent> ∫ :Clap bcommits<CR>
    " alt+s == ß
    nnoremap <silent> ß :Clap hist<CR>
endif


" --------------------------------------------------
" context.vim
" --------------------------------------------------
if has_key(g:plugs, 'context.vim')
    let g:context_nvim_no_redraw = 1
    nnoremap <silent> <expr> <C-Y> context#util#map('<C-Y>')
    nnoremap <silent> <expr> <C-E> context#util#map('<C-E>')
    nnoremap <silent> <expr> zz    context#util#map('zz')
    nnoremap <silent> <expr> zb    context#util#map('zb')
    nnoremap <silent> <expr> zt    context#util#map_zt()
    nnoremap <silent> <expr> H     context#util#map_H()
endif


" --------------------------------------------------
" coc-fzf-preview same as fzf-preview.vim
" --------------------------------------------------
function! CustomCocFzfPreview() abort
    nmap <Space>f [fzf-p]
    xmap <Space>f [fzf-p]

    nnoremap <silent> [fzf-p]f     :<C-u>CocCommand fzf-preview.FromResources project_mru project<CR>
    " nnoremap <silent> [fzf-p]p     :<C-u>CocCommand fzf-preview.FromResources project_mru git<CR>
    nnoremap <silent> <Space>g     :<C-u>CocCommand fzf-preview.FromResources project_mru git<CR>
    nnoremap <silent> [fzf-p]gs    :<C-u>CocCommand fzf-preview.GitStatus<CR>
    nnoremap <silent> [fzf-p]ga    :<C-u>CocCommand fzf-preview.GitActions<CR>
    nnoremap <silent> [fzf-p]b     :<C-u>CocCommand fzf-preview.Buffers<CR>
    nnoremap <silent> [fzf-p]B     :<C-u>CocCommand fzf-preview.AllBuffers<CR>
    nnoremap <silent> [fzf-p]o     :<C-u>CocCommand fzf-preview.FromResources buffer project_mru<CR>
    nnoremap <silent> [fzf-p]<C-o> :<C-u>CocCommand fzf-preview.Jumps<CR>
    nnoremap <silent> [fzf-p]g;    :<C-u>CocCommand fzf-preview.Changes<CR>
    nnoremap <silent> <Space>*     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
    nnoremap <silent> <Space>/     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
    " nnoremap          <Leader>G    :<C-u>CocCommand fzf-preview.ProjectGrep --resume<Space>
    nnoremap          [fzf-p]/     :<C-u>CocCommand fzf-preview.ProjectGrep<Space>
    nnoremap          [fzf-p]gr    :<C-u>CocCommand fzf-preview.ProjectGrep<Space>
    xnoremap          [fzf-p]/     "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
    xnoremap          [fzf-p]gr    "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
    nnoremap          [fzf-p]\     :<C-u>CocCommand fzf-preview.ProjectGrep --add-fzf-arg=--nth=3<Space>
    xnoremap          [fzf-p]\     "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"  --add-fzf-arg=--nth=3
    nnoremap <silent> [fzf-p]t     :<C-u>CocCommand fzf-preview.BufferTags<CR>
    nnoremap <silent> [fzf-p]q     :<C-u>CocCommand fzf-preview.QuickFix<CR>
    nnoremap <silent> [fzf-p]l     :<C-u>CocCommand fzf-preview.LocationList<CR>
    nnoremap <silent> [fzf-p]h     :<C-u>CocCommand fzf-preview.CommandPalette<CR>
    nnoremap <silent> [fzf-p]bm     :<C-u>CocCommand fzf-preview.Bookmarks<CR>
    nnoremap <silent> [fzf-p]m     :<C-u>CocCommand fzf-preview.Marks<CR>

    " floating window size ratio
    let g:fzf_preview_floating_window_rate = 0.95
    let g:fzf_preview_command = 'bat --color=always --plain {-1}'
    let g:fzf_preview_filelist_command = 'rg --files --hidden --follow --no-messages -g \!"* *"'
    let g:fzf_preview_lines_command = 'bat --color=always --plain --number'
    let g:fzf_preview_use_dev_icons = 1
    let g:fzf_preview_dev_icons_limit = 5000
    let g:fzf_preview_dev_icon_prefix_string_length = 3
    let g:fzf_preview_fzf_preview_window_option = 'right:60%'
endfunction


" --------------------------------------------------
" coc-spell-checker
" --------------------------------------------------
function! CustomCocSpellChecker() abort
    " Applying codeAction to the selected region.
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying codeAction to the current buffer.
    nmap <leader>ac  <Plug>(coc-codeaction)
endfunction


" --------------------------------------------------
" coc-git
" --------------------------------------------------
function! CustomCocGit() abort
    set statusline^=%{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}
    autocmd User CocGitStatusChange {command}
    " navigate chunks of current buffer
    nmap [n <Plug>(coc-git-prevchunk)
    nmap ]n <Plug>(coc-git-nextchunk)
    nmap gs <Plug>(coc-git-chunkinfo)
    nmap gh <Plug>(coc-git-commit)
    nnoremap <silent> <space>g :<C-u>CocList --normal gstatus<CR>
endfunction


" --------------------------------------------------
" coc-explorer
" --------------------------------------------------
function! CustomCocExplorer() abort
    let g:coc_explorer_global_presets = {
    \   '.vim': {
    \     'root-uri': '~/.vim',
    \   },
    \   'tab': {
    \     'position': 'tab',
    \     'quit-on-open': v:true,
    \   },
    \   'floating': {
    \     'position': 'floating',
    \     'open-action-strategy': 'sourceWindow',
    \   },
    \   'floatingTop': {
    \     'position': 'floating',
    \     'floating-position': 'center-top',
    \     'open-action-strategy': 'sourceWindow',
    \   },
    \   'floatingLeftside': {
    \     'position': 'floating',
    \     'floating-position': 'left-center',
    \     'floating-width': 50,
    \     'open-action-strategy': 'sourceWindow',
    \   },
    \   'floatingRightside': {
    \     'position': 'floating',
    \     'floating-position': 'right-center',
    \     'floating-width': 50,
    \     'open-action-strategy': 'sourceWindow',
    \   },
    \   'simplify': {
    \     'file-child-template': '[selection | clip | 1] [indent][icon | 1] [filename omitCenter 1]'
    \   }
    \ }
    " Use preset argument to open it
    nmap <leader>ed :CocCommand explorer --preset .vim<CR>
    nmap <leader>ef :CocCommand explorer --preset floating<CR>

    " List all presets
    nmap <leader>el :CocList explPresets<CR>
    autocmd BufEnter * if (winnr("$") == 1 && &filetype == 'coc-explorer') | q | endif
endfunction


" --------------------------------------------------
" coc.vim
" --------------------------------------------------
if has_key(g:plugs, 'coc.nvim')
    " \ 'coc-git',
    " \ 'coc-python',
    " \ 'coc-pyright',
    let g:coc_global_extensions = [
                \ 'coc-actions',
                \ 'coc-explorer',
                \ 'coc-flutter-tools',
                \ 'coc-highlight',
                \ 'coc-json',
                \ 'coc-markdownlint',
                \ 'coc-pairs',
                \ 'coc-fzf-preview',
                \ 'coc-pyright',
                \ 'coc-sh',
                \ 'coc-snippets',
                \ 'coc-spell-checker',
                \ 'coc-syntax',
                \ 'coc-vimlsp',
                \ 'coc-yaml'
                \]

    " TextEdit might fail if hidden is not set.
    set hidden
    set nowritebackup
    set cmdheight=2

    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable delays and poor user experience.
    set updatetime=100

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("patch-8.1.1564")
        " Recently vim can merge signcolumn and number column into one
        set signcolumn=number
    else
        set signcolumn=yes
    endif

    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    " inoremap <silent><expr> <TAB>
    "             \ pumvisible() ? "\<C-n>" :
    "             \ <SID>check_back_space() ? "\<TAB>" :
    "             \ coc#refresh()
    " inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    " function! s:check_back_space() abort
    "     let col = col('.') - 1
    "     return !col || getline('.')[col - 1]  =~# '\s'
    " endfunction

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)
    nmap <silent> <F3> <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        elseif (coc#rpc#ready())
            call CocActionAsync('doHover')
        else
            execute '!' . &keywordprg . " " . expand('<cword>')
        endif
    endfunction

    " semshi highlight has conflict with this
    if has_key(g:plugs, 'semshi') != 1
        if &filetype !=# 'python'
            " Highlight the symbol and its references when holding the cursor.
            autocmd CursorHold * silent call CocActionAsync('highlight')
        endif
    endif

    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)
    nmap <F6> <Plug>(coc-rename)

    " Formatting selected code.
    " xmap <leader>f  <Plug>(coc-format-selected)
    " nmap <leader>f  <Plug>(coc-format-selected)
    autocmd FileType python let b:coc_root_patterns = ['.git', '.env', 'setup.cfg', 'setup.py', 'pyproject.toml']

    augroup mygroup
        autocmd!
        " Setup formatexpr specified filetype(s).
        " autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
        " Update signature help on jump placeholder.
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    hi CocHighlightText guibg=#556873 gui=bold

    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')
    nnoremap <space>l :call CocAction('format')<cr>

    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    " Mappings for CoCList
    " Show all diagnostics.
    nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions.
    nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
    " Show commands.
    nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document.
    nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols.
    nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list.
    nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

    " Add (Neo)Vim's native statusline support.
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: vim-airline.
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}


    if index(g:coc_global_extensions, 'coc-git') != -1
        call CustomCocGit()
    endif

    if index(g:coc_global_extensions, 'coc-explorer') != -1
        nnoremap <leader>t :CocCommand explorer<cr>
        call CustomCocExplorer()
    endif

    if index(g:coc_global_extensions, 'coc-fzf-preview') != -1
        call CustomCocFzfPreview()
    endif

    if index(g:coc_global_extensions, 'coc-spell-checker') != -1
        call CustomCocSpellChecker()
    endif
endif
